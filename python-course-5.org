* 5. Структури от данни

  Тази глава описва по-подробно някои неща, които вече сте научили,
  като добавя и нови неща.

** 5.1. Повече за списъците

   Типът данни списък (list) притежава още няколко метода. Ето всички
   методи на обектите от тип списък:

   - list.append(x) :: Добавя елемент в края на списъка; еквивалентно
                       на `a[len(a):] = [x]'.

   - list.extend(L) :: Разширява списъка като добавя всички елементи
                       от дадения списък; еквивалентно на `a[len(a):]
                       = L'.

   - list.insert(i, x) :: Вмъква елемент в дадената позиция.  Първият
                          аргумент е индекса на елемента, преди който
                          се вмъква, така че `a.insert(0, x)' вмъква в
                          началото на списъка, а `a.insert(len(a), x)'
                          е еквивалентно на `a.append(x)'.

   - list.remove(x) :: Премахва първия елемент от списъка, чиято
                       стойност е /x/.  Грешка е, ако няма такъв
                       елемент.

   - list.pop([i]) :: Премахва елемента, намиращ се на дадената
                      позиция в списъка и го връща като резултат.  Ако
                      не е указан индекс, `a.pop()' премахва и връща
                      последния елемент в списъка.  (Квадратните скоби
                      около параметъра /i/ в сигнатурата на метода
                      указват, че параметърът е незадължителен, а не
                      че на това място трябва да поставите квадратни
                      скоби.  Често ще срещате тази нотация в Python
                      Library Reference.)

   - list.index(x) :: Връща индекса на първия елемент от списъка,
                      чиято стойност е x.  Грешка е, ако няма такъв
                      елемент.

   - list.count(x) :: Връща колко пъти /x/ се среща в списъка.

   - list.sort() :: Сортира елементите в списъка, на място.

   - list.reverse() :: Обръща наопаки елементите в списъка, на място.

   Един пример, който използва повечето от методите на списъка:

       >>> a = [66.25, 333, 333, 1, 1234.5]
       >>> print a.count(333), a.count(66.25), a.count('x')
       2 1 0
       >>> a.insert(2, -1)
       >>> a.append(333)
       >>> a
       [66.25, 333, -1, 333, 1, 1234.5, 333]
       >>> a.index(333)
       1
       >>> a.remove(333)
       >>> a
       [66.25, -1, 333, 1, 1234.5, 333]
       >>> a.reverse()
       >>> a
       [333, 1234.5, 1, 333, -1, 66.25]
       >>> a.sort()
       >>> a
       [-1, 1, 66.25, 333, 333, 1234.5]

*** 5.1.1. Използване на списъците като стекове

    Методите на списъка правят много лесна употребата му като стек,
    където последният добавен елемент се извлича първи („last-in,
    first out“ – „последен вътре, първи вън“).  За да добавите елемент
    на върха на стека, използвайте append().  За да извлечете елемент
    от върха на стека, използвайте pop() без явен индекс.  Например:

        >>> stack = [3, 4, 5]
        >>> stack.append(6)
        >>> stack.append(7)
        >>> stack
        [3, 4, 5, 6, 7]
        >>> stack.pop()
        7
        >>> stack
        [3, 4, 5, 6]
        >>> stack.pop()
        6
        >>> stack.pop()
        5
        >>> stack
        [3, 4]

*** 5.1.2. Използване на списъците като опашки

    Възможно е да използвате списък като опашка, където първият
    добавен елемент се извлича първи (“first-in, first-out” – “първи
    вътре, първи вън”).  Списъците, обаче, не са ефективни за тази
    цел.  Докато добавянето и изваждането на елементи в края на
    списъка се явяват бързи операции, извършването на добавяне и
    изваждане на елементи от началото на списъка е бавно (понеже
    всички останали елементи трябва да се изместват с една позиция).

    За да реализирате опашка, използвайте `collections.deque' [*],
    която е проектирана да извършва бързи добавяния и изваждания от
    двата края.  Например:

        >>> from collections import deque
        >>> queue = deque(["Пешо", "Гошо", "Станко"])
        >>> queue.append("Кольо")           # Кольо пристига
        >>> queue.append("Биляна")          # Биляна пристига
        >>> print queue.popleft()           # Първият пристигнал си тръгва сега
        Пешо
        >>> print queue.popleft()           # Вторият пристигнал си тръгва сега
        Гошо
        >>> for i in queue: print i,        # Останалата опашка в реда на пристигане
        Станко Кольо Биляна

    [*] deque – (произнася се „дек“) double-ended queue.  Абстрактна
        структура от данни, вид опашка, за която елементите могат да
        бъдат добавяни към или премахвани от началото или края [на
        опашката].

*** 5.1.3. Средства за функционално програмиране

    Съществуват три вградени функции, които са много полезни когато се
    използват със списъци: `filter()', `map()', и `reduce()'.

    `filter(ФУНКЦИЯ, РЕДИЦА)' връща редица, съдържаща онези елементи
    от РЕДИЦА, за които `ФУНКЦИЯ(ЕЛЕМЕНТ)' е истина.  Ако редицата е
    символен низ или комплект, резултатът ще бъде от същия тип, а в
    противен случай винаги е списък.  Например, да изчислим няколко
    прости числа:

        >>> def f(x): return x % 2 != 0 and x % 3 != 0
        ...
        >>> filter(f, range(2, 25))
        [5, 7, 11, 13, 17, 19, 23]

    `map(ФУНКЦИЯ, РЕДИЦА)' извиква `ФУНКЦИЯ(ЕЛЕМЕНТ)' за всеки от
    елементите на редицата и връща списък с върнатите стойности.
    Например, нека изчислим няколко куба:

        >>> def cube(x): return x*x*x
        ...
        >>> map(cube, range(1, 11))
        [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]

    Може да бъде подадена повече от една редица.  Функцията трябва да
    приема толкова аргументи, колкото са редиците.  Тя се извиква със
    съответния елемент от всяка редица (или `None', ако някоя редица е
    по-къса от другите).  Например:

        >>> seq = range(8)
        >>> def add(x, y): return x+y
        ...
        >>> map(add, seq, seq)
        [0, 2, 4, 6, 8, 10, 12, 14]

    `reduce(ФУНКЦИЯ, РЕДИЦА)' връща единична стойност получена от
    извикването на двоичната функция /ФУНКЦИЯ/ върху първите два
    елемента от редицата, после върху резултата и следващия елемент и
    така нататък.  Например, за да изчислим сбора на числата от 1 до
    10:

        >>> def add(x,y): return x+y
        ...
        >>> reduce(add, range(1, 11))
        55

    Ако в редицата има само един елемент, тогава се връща неговата
    стойност.  Ако редицата е празна, се предизвиква изключение.

    Може да бъде подаден трети аргумент за да се укаже начална
    стойност.  В такъв случай началната стойност се връща когато
    редицата е празна, и функцията първо се прилага върху началната
    стойност и първия елемент от редицата, после върху резултата и
    следващия елемент и така нататък.  Например:

        >>> def sum(seq):
        ...     def add(x,y): return x+y
        ...     return reduce(add, seq, 0)
        ...
        >>> sum(range(1, 11))
        55
        >>> sum([])
        0

    Не използвайте тази примерна дефиниция на `sum()' – тъй като
    сумирането на числа е толкова обичайна необходимост, вече се
    предоставя вградената функция `sum(РЕДИЦА)', която работи точно по
    този начин.

    /Ново във версия 2.3./

*** 5.1.4. Обхващане на списъци

    Обхващането на списъци (list comprehensions) предоставя кратък и
    стегнат начин за създаване на списъци без да се прибягва до
    използването на `map()', `filter()' и/или `lambda'.  Получената
    дефиниция на списък обикновено е по-ясна, отколкото при списъците,
    създадени със споменатите конструкции.  Всяко обхващане на списък
    се състои от израз, следван от клауза `for', после нула или повече
    клаузи `for' или `if'.  Резултатът ще бъде списък, получен от
    оценяването на израза в контекста на следващите клаузи `for' и
    `if'.  Ако резултатът от израза трябва да се оцени до комплект,
    тогава целият израз трябва да бъде затворен в скоби.

        >>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
        >>> [weapon.strip() for weapon in freshfruit]
        ['banana', 'loganberry', 'passion fruit']
        >>> vec = [2, 4, 6]
        >>> [3*x for x in vec]
        [6, 12, 18]
        >>> [3*x for x in vec if x > 3]
        [12, 18]
        >>> [3*x for x in vec if x < 2]
        []
        >>> [[x,x**2] for x in vec]
        [[2, 4], [4, 16], [6, 36]]
        >>> [x, x**2 for x in vec]  # грешка - за комплектите са нужни скоби
        File "<stdin>", line 1, in ?
        [x, x**2 for x in vec]
        ^
        SyntaxError: invalid syntax
        >>> [(x, x**2) for x in vec]
        [(2, 4), (4, 16), (6, 36)]
        >>> vec1 = [2, 4, 6]
        >>> vec2 = [4, 3, -9]
        >>> [x*y for x in vec1 for y in vec2]
        [8, 6, -18, 16, 12, -36, 24, 18, -54]
        >>> [x+y for x in vec1 for y in vec2]
        [6, 5, -7, 8, 7, -5, 10, 9, -3]
        >>> [vec1[i]*vec2[i] for i in range(len(vec1))]
        [8, 12, -54]

    Обхващането на списъци е много по-гъвкаво от `map()' и може да
    бъде прилагано към сложни изрази и вложени функции:

        >>> [str(round(355/113.0, i)) for i in range(1,6)]
        ['3.1', '3.14', '3.142', '3.1416', '3.14159']

*** 5.1.5. Вложено обхващане на списъци

    Ако сте издръжливи и не ви се повдига, обхващанията на списъци
    могат да бъдат влагани едно в друго.  Те представляват мощен
    инструмент, но – както всеки мощен инструмент – следва да се
    използват внимателно, ако изобщо се използват.

    Да разгледаме следния пример с матрица 3x3 представена като
    списък, съдържащ три списъка, по един списък на ред:

        >>> mat = [
        ...        [1, 2, 3],
        ...        [4, 5, 6],
        ...        [7, 8, 9],
        ...       ]

    Сега, ако искаме да разменим редовете и колоните, можем да
    използваме обхващане на списъци:

        >>> print [[row[i] for row in mat] for i in [0, 1, 2]]
        [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

    На /вложеното/ обхващане на списък трябва да се отделя специално
    внимание:

        За да избегнете каквото и да е схващане на вложено обхващане
        на списък, четете отдясно на ляво.

    Една по-многословна версия на този фрагмент показва потока на
    изпълнение по явен начин:

        for i in [0, 1, 2]:
            for row in mat:
                print row[i],
            print

    В реални условия би следвало да предпочитате вградените функции
    пред сложните конструкции за управление на потока на изпълнение.
    Функцията `zip()' би свършила чудесна работа в този случай:

        >>> zip(*mat)
        [(1, 4, 7), (2, 5, 8), (3, 6, 9)]

    Виж раздел /4.7.4. Разпакетиране на списъци с аргументи/ за
    подробности относно звездичката в този пример.

** 5.2. Операторът del

   Съществува начин за премахване на елемент от списък чрез посочване
   на индекса му, вместо на неговата стойност.  Това става чрез
   операторът `del'.  Той се различава от метода `pop()', който връща
   стойност.  Операторът `del' може да бъде използван и за премахване
   на изрезки от списък или изчистване на целия списък (което по-рано
   направихме чрез присвояване на празен списък към изрезката).
   Например:

       >>> a = [-1, 1, 66.25, 333, 333, 1234.5]
       >>> del a[0]
       >>> a
       [1, 66.25, 333, 333, 1234.5]
       >>> del a[2:4]
       >>> a
       [1, 66.25, 1234.5]
       >>> del a[:]
       >>> a
       []

   `del' може да бъде използван и за изтриване на самите променливи:

       >>> del a

   Оттук нататък обръщението към a е грешка (поне докато не и се
   присвои друга стойност).  По-късно ще открием и други употреби на
   `del'.

** 5.3. Комплекти и редици

   Видяхме, че списъците и символните низове имат много общи свойства,
   например индексирането и операциите с изрязване.  Те са два примера
   за типове данни „редица“ (виж раздел „5.6. Типове редици — `str',
   `unicode', `list', `tuple', `buffer', `xrange'“).  Тъй като Питон е
   развиващ се език, в бъдеще могат да бъдат добавени други типове
   редици.  Съществува и още един стандартен тип редица: /комплектът/
   (tuple) [*].

       >>> t = 12345, 54321, 'hello!'
       >>> t[0]
       12345
       >>> t
       (12345, 54321, 'hello!')
       >>> # Комплектите могат да бъдат влагани един в друг:
       ... u = t, (1, 2, 3, 4, 5)
       >>> u
       ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))

   [*] На англ. „tuple“.  Пуристите с образование по математика биха
       предпочели да наричат този тип „наредена n-торка“.  Признавам,
       че те имат своите основания, но въпреки това предпочитам да го
       предам като „комплект“. (бел. прев.)

   Както виждате, в изхода комплектите винаги са затворени в скоби,
   така че вложените комплекти да се тълкуват правилно.  Те могат да
   бъдат въвеждани със или без заграждащите скоби, макар и често
   скобите да са, така или иначе, задължителни (ако комплектът е част
   от по-голям израз).

   Комплектите имат широка употреба, например двойка координати (x,
   y), записи в база данни за служители, и прочие.  Комплектите,
   подобно на символните низове, са неизменяеми: не е възможно да
   присвоявате стойност на индивидуален елемент от комплект (все пак
   можете да имитирате голяма част от този ефект чрез изрязване и
   слепване).  Възможно е, обаче, да създавате комплекти които
   съдържат изменяеми обекти, например списъци.

   Особен проблем представлява създаването на комплекти, съдържащи 0
   или 1 елемент: за тази цел синтаксисът включва няколко допълнителни
   чалъма.  Празни комплекти се създават чрез празна двойка скоби;
   комплект с един елемент се създава със запетая след стойността (не
   е достатъчно да затворите единичната стойност в скоби).  Грозно е,
   но върши работа.  Например:

       >>> empty = ()
       >>> singleton = 'hello',    # <-- забележете запетаята в края
       >>> len(empty)
       0
       >>> len(singleton)
       1
       >>> singleton
       ('hello',)

   Конструкцията `t = 12345, 54321, "ехо, привет!"' е един пример за
   /пакетиране на комплект/ (tuple packing): стойностите 12345, 54321
   и 'ехо, привет!' са пакетирани заедно в един комплект.  Обратната
   операция също е възможна, например:

       >>> x, y, z = t

   Това се нарича съответно /разпакетиране на редица/ (sequence
   unpacking).  Разпакетирането на редица изисква списъкът от
   променливи от лявата страна да притежава същия брой елементи,
   колкото е дължината на редицата.  Обърнете внимание, че
   множественото присвояване в действителност е просто комбинация от
   пакетиране на комплект и разпакетиране на редица.

** 5.4. Множества

   Питон включва и тип данни за /множества/ (sets).  Множеството е
   неподредена колекция без повтарящи се елементи.  Основните употреби
   включват проверка за членство и отстраняване на дублиращи се
   стойности.  Обектите от тип множество поддържат и математически
   операции като обединение, сечение, разлика и симетрична разлика.

   Ето една кратка демонстрация:

       >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
       >>> fruit = set(basket)               # създаваме множество без дублиращи се елементи
       >>> fruit
       set(['orange', 'pear', 'apple', 'banana'])
       >>> 'orange' in fruit                 # бърза проверка за членство
       True
       >>> 'crabgrass' in fruit
       False

       >>> # Демонстрация на операциите върху множества, приложени
       ... # върху уникалните букви на две думи
       ...
       >>> a = set('abracadabra')
       >>> b = set('alacazam')
       >>> a                                  # уникалните букви в a
       set(['a', 'r', 'b', 'c', 'd'])
       >>> a - b                              # буквите в a, но не и в b
       set(['r', 'd', 'b'])
       >>> a | b                              # буквите в a или в b
       set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
       >>> a & b                              # буквите хем в a, хем в b
       set(['a', 'c'])
       >>> a ^ b                              # буквите в a или b, но без общите за a и b
       set(['r', 'd', 'b', 'm', 'z', 'l'])

** 5.5. Речници

   Друг полезен тип данни, вграден в Питон, е /речникът/ (виж раздел
   „5.8. Mapping Types — dict“ от Python Library Reference).
   Речниците понякога се откриват в други езици като „асоциативни
   памети“ или „асоциативни масиви“.  За разлика от редиците, които са
   индексирани с някакъв диапазон от числа, речниците са индексирани
   по /ключове/, които могат да бъдат от всеки неизменяем тип.
   Символните низове и числата винаги могат да служат като ключове.
   Комплектите могат да бъдат използвани като ключове само ако
   съдържат символни низове, числа, или комплекти.  Ако даден комплект
   пряко или косвено съдържа какъвто и да било изменяем обект, той не
   може да бъде използван като ключ.  Не можете да използвате списъци
   като ключове, тъй като списъците могат да бъдат променяни на място
   посредством присвояване на индекси, присвояване на изрезки, или
   чрез методи като `append()' и `extend()'.

   Най-добрият начин да се мисли за речниците е като за неподредено
   множество от двойки /ключ: стойност/, с изискването ключовете да са
   уникални (в рамките на един речник).  Чифт големи скоби създава
   празен речник: `{}'.  Разполагането на разделен със запетаи списък
   от двойки ключ:стойност в големите скоби води до инициализирането
   на начални двойки ключ:стойност в речника.  Това също е и начинът,
   по който речниците се извеждат на изхода.

   Основните операции върху речника са съхраняване на стойност с
   някакъв ключ и извличане на стойността, подавайки ключа.  Възможно
   е също да се премахва двойка ключ:стойност чрез `del'.  Ако
   извършвате операция по съхраняване, използвайки вече използван
   ключ, старата стойност, асоциирана с този ключ, ще бъде забравена.
   Грешка е, ако се извлича стойност използвайки несъществуващ ключ.

   Методът `keys()' на обект от тип речник връща списък с всички
   използвани в речника ключове в случаен ред (ако го искате сортиран,
   просто приложете метода `sort()' върху списъка от ключове).  За да
   проверите дали даден ключ е в речника, използвайте ключовата дума
   `in'.

   Ето един кратък пример за използване на речник:

       >>> tel = {'plamen': 4098, 'wankata': 4139}
       >>> tel['nadya'] = 4127
       >>> tel
       {'plamen': 4098, 'wankata': 4139, 'nadya': 4127}
       >>> tel['plamen']
       4098
       >>> del tel['wankata']
       >>> tel['iva'] = 4127
       >>> tel
       {'plamen': 4098, 'iva': 4127, 'nadya': 4127}
       >>> tel.keys()
       ['plamen', 'iva', 'nadya']
       >>> 'nadya' in tel
       True

   Конструкторът `dict()' изгражда речници направо от списъци с двойки
   ключ-стойност, представени като комплекти.  Когато двойките
   ключ-стойност образуват модел, те могат да бъдат указани сбито чрез
   обхващане на списъци.

       >>> dict([('wankata', 4139), ('nadya', 4127), ('plamen', 4098)])
       {'plamen': 4098, 'wankata': 4139, 'nadya': 4127}
       >>> dict([(x, x**2) for x in (2, 4, 6)])     # чрез обхващане на списък
       {2: 4, 4: 16, 6: 36}

   По-нататък в това ръководство ще научим за генераторните изрази
   (Generator Expressions), които са още по-подходящи за задачата по
   предоставяне на двойки ключ-стойност за конструктора `dict()'.

   Когато ключовете са прости символни низове, понякога е по-лесно
   двойките ключ-стойност да се укажат чрез аргументи с ключови думи:

       >>> dict(wankata=4139, nadya=4127, plamen=4098)
       {'wankata: 4139, 'plamen: 4098, 'nadya': 4127}

** 5.6. Техники за реализиране на цикли

   Когато итерираме върху речници, ключът и съответната му стойност
   могат да бъдат получени едновременно чрез метода `iteritems()'.

       >>> businessmen = {'косьо': 'самоковеца', 'златко': 'баретата'}
       >>> for k, v in businessmen.iteritems():
       ...     print k, v
       ...
       косьо самоковеца
       златко баретата

   Когато итерираме върху редици, индексът на текущата позиция и
   съответната ѝ стойност могат да бъдат получени едновременно чрез
   функцията `enumerate()'.

       >>> for i, v in enumerate(['ала', 'бала', 'портокала']):
       ...     print i, v
       ...
       0 ала
       1 бала
       2 портокала

   За да итерираме върху две или повече редици наведнъж, записите
   могат да се комбинират чрез функцията `zip()'.

       >>> questions = ['name', 'quest', 'favorite color']
       >>> answers = ['lancelot', 'the holy grail', 'blue']
       >>> for q, a in zip(questions, answers):
       ...     print 'What is your {0}?  It is {1}.'.format(q, a)
       ...
       What is your name?  It is lancelot.
       What is your quest?  It is the holy grail.
       What is your favorite color?  It is blue.

   За да итерираме върху редица в обратен ред, първо указваме редицата
   в прав ред и после извикваме функцията `reversed()'.

       >>> for i in reversed(xrange(1,10,2)):
       ...     print i
       ...
       9
       7
       5
       3
       1

   За да итерирате върху редица в сортиран ред, използвайте функцията
   `sorted()', която връща нов сортиран списък, докато
   редицата-източник остава непокътната.

       >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
       >>> for f in sorted(set(basket)):
       ...     print f
       ...
       apple
       banana
       orange
       pear

** 5.7. Повече за условията

   Условията, използвани в конструкциите `while' и `if' могат да
   съдържат не само сравнения, но и всякакви други оператори.

   Операторите за сравнение `in' и `not in' проверяват дали дадена
   стойност се среща (или не се среща) в даден обект от тип редица.
   Операторите `is' и `is not' сравняват дали двата обекта
   действително представляват един и същ обект; това има значение само
   за променливите обекти като списъците.  Всички оператори за
   сравнение имат един и същ приоритет, който е по-нисък от този на
   всички числови оператори.

   Сравненията могат да бъдат навързвани: например, `a < b == c'
   проверява дали `a' е по-малко от `b' и освен това дали `b' е равно
   на `c'.

   Сравненията могат да бъдат комбинирани с Булевите оператори `and' и
   `or', а резултатът от сравнението (или от който и да е друг Булев
   израз) може да бъде отрицаван с `not'.  Всички те имат по-нисък
   приоритет от операторите за сравнение; измежду тях `not' има
   най-висок приоритет, а `or' — най-малък, така че `A and not B or C'
   е еквивалентно на `(A and (not B)) or C'.  Разбира се, могат да
   бъдат използвани скоби за да се изрази желаното съчетание.

   Булевите оператори `and' и `or' са от т.нар. /пестеливи/ оператори:
   техните аргументи се оценяват от ляво на дясно, и оценяването
   приключва в момента в който се определи резултата.  Сиреч, ако `A'
   и `C' имат стойност истина, а `B' е неистина, тогава оценяването на
   израза `A and B and C' не води до оценяването на израза C.  Изобщо,
   връщаната стойност на пестелив оператор, когато се използва като
   обикновена стойност, а не като Булева стойност, е стойността на
   последния оценен аргумент.

   Възможно е резултатът от сравнение или друг Булев израз да се
   присвои на променлива.  Например,

       >>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
       >>> non_null = string1 or string2 or string3
       >>> non_null
       'Trondheim'

   Забележете, че в Питон, за разлика от C, вътре в изразите не може
   да се яви присвояване.  Програмистите на C може да мърморят заради
   това, но така се избягва един цял клас проблеми, често срещани в
   програмите на C: въвеждане на `=' в израз, докато се е имало
   предвид `=='.

** 5.8. Сравняване на редици и други типове

   Обектите от тип редица могат да бъдат сравнявани с други обекти от
   същия тип редица.  Сравнението използва /лексикографска/ подредба:
   първо се сравняват първите два елемента, и ако се различават, това
   определя резултата от сравнението; ако са равни, сравняват се
   следващите два елемента, и така нататък, докато се изчерпи някоя от
   редиците.  Ако двата елемента за сравнение са сами по себе си
   редици от един и същ тип, лексикографското сравнение се провежда
   рекурсивно.  Ако всички елементи на две редици са равни, двете
   редици се считат за равни.  Ако една редица е начална под-редица на
   друга, по-късата редица е по-малката.  Лексикографската подредба на
   символните низове използва ASCII подредба за отделните символи.
   Ето няколко примера за сравнение между редици от един и същ тип:

       (1, 2, 3)              < (1, 2, 4)
       [1, 2, 3]              < [1, 2, 4]
       'ABC' < 'C' < 'Pascal' < 'Python'
       (1, 2, 3, 4)           < (1, 2, 4)
       (1, 2)                 < (1, 2, -1)
       (1, 2, 3)             == (1.0, 2.0, 3.0)
       (1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)

   Забележете, че е допустимо сравняването на обекти от различен тип.
   Резултатът е определим, но произволен: типовете са подредени според
   името си.  Така, списъкът (list) винаги е по-малък от символния низ
   (string), а символният низ винаги е по-малък от комплекта (tuple),
   и прочие. [*] Смесените числови типове се сравняват според
   числовата им стойност, така че 0 е равно на 0.0, и прочие.

   [*] Правилата за сравняване на обекти от различен тип не са нещо,
       на което трябва да се разчита; те могат да бъдат променени в
       една бъдеща версия на езика.
