* 2. Използване на интерпретатора на Питон


** 2.1. Извикване на интерпретатора

   + Къде е инсталиран?

   + Обикновено го стартираме просто така:
   
         python

   + Изход с EOF (Control-D в Unix, Control-Z в DOS или Windows)

     EOF въведен след първичния промпт (>>>) предизвиква изход от
     интерпретатора с нулев код за изход (exit status).  Алтернативен
     начин:

         quit()

   + GNU Readline

   + Интерпретаторът действа подобно на обвивката на Unix:

     - когато е извикан със стандартен вход свързан към
       tty-устройство, той чете и изпълнява команди интерактивно;
       
     - когато е извикан с файлово име като аргумент или с файл на
       стандартния вход, той чете и изпълнява скрипта от този файл.

   + Трети начин за стартиране на интерпретатора е

         python -c КОМАНДА [АРГ] ...

     - Изпълняват се оператор(ите) в КОМАНДА, аналогично на опцията -c
       на обвивката.

     - Тъй като конструкциите на Питон често съдържат интервали или
       други знаци, които обвивката третира по особен начин, най-добре
       е да заградите цялата команда в двойни кавички.

   + Някои модули на Питон са полезни и като скриптове.

         python -m МОДУЛ [АРГ] ...

     изпълнява изходния файл за модула сякаш сме написали пълното му
     име на командния ред.

   + Разлика между ‘python ФАЙЛ’ и ‘python <ФАЙЛ’

     - Във втория случай заявките за вход на програмата, като
       извиквания на input() и raw_input(), се задоволяват от ФАЙЛ.
       Тъй като този файл вече е бил докрай прочетен от граматичния
       анализатор (parser) преди програмата да е започнала
       изпълнението си, то тя незабавно ще срещне EOF.

     - В първия случай (който обикновено е този, който желаем),
       заявките за вход се задоволяват от който и да е файл или което
       и да е устройство, свързани към стандартния вход на
       интерпретатора на Питон.

   + Влизане в интерактивен режим веднага след изпълнението на
     скрипт-файл:

     python -i ФАЙЛ

     (Няма да се получи, ако скрипта се чете от стандартния вход,
     поради същите причини, обяснени по-горе.)


*** 2.1.1. Предаване на аргументи

    + Променливата `sys.argv' съдържа името на скрипта и аргументите
      към него (когато са известни на интерпретатора!).

    + `sys.argv' е списък от символни низове (string list)

    + Този списък съдържа поне един елемент;

       - когато не са дадени скрипт и аргументи, `sys.argv[0]' е
         празен символен низ.

    + Когато името на скрипта е дадено като `-' (сиреч стандартен
      вход), `sys.argv[0]' е установен на `-'.

    + Когато е използвана `-c КОМАНДА', тогава `sys.argv[0]' е
      установен на ’-c’.

    + Когато е използван `-m МОДУЛ', тогава `sys.argv[0]' е установен
      на пълното файлово име на съответния модул.

    + Опциите, открити след `-c КОМАНДА' или `-m МОДУЛ' не се третират
      като опции, предназначени за интерпретатора на Питон, а вместо
      това се разполагат в `sys.argv', за да бъдат обработени от
      командата.


*** 2.1.2. Интерактивен режим

    + Интерактивен режим – когато командите се четат от tty

    + Първичен промпт – обикновено `>>> ', за следваща команда

    + Вторичен промпт – обикновено `... ', за допълнителен ред

    + Преди да изведе своя първичен промпт, интерпретаторът извежда
      поздравително съобщение, започвайки със собствения си номер на
      версия и бележка за авторско право:

          python
          Python 2.6 (#1, Feb 28 2007, 00:02:06)
          Type "help", "copyright", "credits" or "license" for more information.
          >>>

    + Допълнителните редове са необходими при въвеждането на
      многоредова конструкция:

          >>> the_world_is_flat = 1
          >>> if the_world_is_flat:
          ...     print "Be careful not to fall off!"
          ...
          Be careful not to fall off!


** 2.2. Интерпретаторът и неговото обкръжение


*** 2.2.1. Обработка на грешките

    + Когато се появи грешка, интерпретаторът извежда съобщение за
      грешка и трасиране на стека (stack trace).

    + Ако се намира в интерактивен режим, след това се връща към
      първичния промпт;

    + а когато входът идва от файл, той излиза с ненулев код за изход
      след трасирането на стека.

    + (В този смисъл, изключенията обработени с `except' клауза в
      `try'-конструкция не са грешки.)

    + Някои грешки са безусловно фатални и предизвикват изход от
      интерпретатора с ненулев код; това се отнася за вътрешните
      несъответствия и някои случаи на изчепрване на паметта.

    + Всички съобщения за грешка се пишат в стандартния поток (stream)
      за грешки;

    + нормалният изход от изпълнените команди се пише в стандартния
      изход.

    + Въвеждането на знак за прекъсване (обикновено Control-C или DEL)
      в първичния или вторичния промпт отменя входа и връща към
      първичния промпт.

    + Въвеждането на прекъсване, когато се изпълнява команда, води до
      изключение `KeyboardInterrupt', което може да бъде обработено от
      конструкция `try'.


*** 2.2.2. Изпълними скриптове на Питон

    + Скриптовете стават директно изпълними чрез:

          #! /usr/bin/env python

      в началото на скрипта и установяването на изпълним режим за
      файла.

    + Приемаме, че самият интерпретатор е в потребителския $PATH.

    + Тези `#!' трябва да бъдат първите два знака от файла.
     
    + Знакът `#' в Питон се използва за начало на коментар.


*** 2.2.3. Кодиране на изходния код

    + Най-добрият начин да се декларира кодирането на файл с изходен
      код е като се постави специален служебен коментар веднага след
      реда с `#!':

          # -*- coding: ENCODING -*-

      Тази декларация ни дава възможност директно да пишем стрингови
      литерали от тип Уникод в избраното кодиране.

      Списъкът от възможни кодирания може да бъде намерен в раздела
      „codecs“ на „Python Library Reference“.

      - Между другото, това е конвенцията на GNU Emacs.

    + Ако текстовият ни редактор може да записва файлове като UTF-8 с
      UTF-8 byte order mark (BOM), можем да използваме този маркер
      вместо декларация на кодирането.  Но внимание:

      - Този маркер не се разбира от по-старите издания на Питон (2.2
        и по-ранни)

      – Маркерът пречи на операционната система да стартира скриптови
        файлове с първи ред `#!'.

    + Използвайки UTF-8, можем да въвеждаме всякакви символи от
      множеството на Уникод в стрингови литерали и коментари.

      - Не се поддържа използването на не-ASCII символи в
        идентификаторите.

      - Редакторът ни трябва да разбира от UTF-8 и да използва шрифт,
        който поддържа всички символи, намиращи се във файла.


*** 2.2.4. Интерактивен начален файл

    Често, когато използвате Питон интерактивно, е удобно да
    разполагате със стандартни команди, които да се изпълняват всеки
    път, когато се стартира интепретатора.

    + В променлива от обкръжението, наречена `$PYTHONSTARTUP', се
      поставя името на файла, съдържащ нашите начални команди.

    + Подобно е на свойството ‘.profile’ в обвивките на Unix.

    + Този файл се прочита само в интерактивните сесии, но не и когато
      Питон чете командите от скрипт, или `/dev/tty' е даден като явен
      източник на команди.

    + Във всички останали случаи, интерпретаторът се държи като
      интерактивна сесия.

    + Файлът се изпълнява в същото пространство от имена, където се
      изпълняват и интерактивните команди, така че обектите, които той
      дефинира или импортира, могат без явно определяне да се
      използват в интерактивната сесия.

    + В този файл също така можете да смените промптовете `sys.ps1' и
      `sys.ps2'.

    + Ако искаме да прочем допълнителен начален файл от текущата
      директория, тогава можем да програмирате това в глобалния
      начален файл, напр. `if os.path.isfile('.pythonrc.py'):
      execfile('.pythonrc.py')'.

    + Ако искаме да използаме началния файл в скрипт, трябва изрично
      да укажем това в скрипта:

          import os
          filename = os.environ.get('PYTHONSTARTUP')
          if filename and os.path.isfile(filename):
              execfile(filename)


     





